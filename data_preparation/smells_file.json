[
    {
        "name": "Broadcasting Feature Not Used",
        "description": "This smell refers to when the developer uses a tensor without a broadcasting operation.",
        "pipeline_stage": "Model Training",
        "effect": "Memory Issues",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Chain Indexing",
        "description": "This smell refers to when a developer uses to access a single data of a data frame using [][].",
        "pipeline_stage": "Data Cleaning",
        "effect": "Performance",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "Columns and DataType Not Explicitly Set",
        "description": "This smell refers to when a developer declares a data frame without declaring the column name and the data type.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Dataframe Conversion API Misused",
        "description": "This smell refers to when a developer uses the function .values() to transform a data frame object to a Numpy array.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Defect Proneness",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "Deterministic Algorithm Option Not Used",
        "description": "This smell refers to when a developer does not remove the option \"deterministic_algorithms(True)\".",
        "pipeline_stage": "Model Training",
        "effect": "Reproducibility",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "In-Place APIs Misused",
        "description": "This smell refers to when the developer assumes the Pandas function returns an in-place value.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Empty Column Misinitialization",
        "description": "This smell refers to when a developer uses zero values or empty strings to initialize a new column in a data frame.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Robustness",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Gradients Not Cleared Before Backward Propagation",
        "description": "This smell refers to when a developer does not use \"optimizer.zero_grad()\" before \"loss_fn.backward()\" to clear gradients.",
        "pipeline_stage": "Model Training",
        "effect": "Defect Proneness",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "Matrix Multiplication API Misused",
        "description": "This smell refers to when the developer uses the function \"np.dot\" to multiply a Numpy matrix.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Readability",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "Memory Not Freed",
        "description": "This smell regards when a developer declares a machine learning model in a loop operation without using the library ad-hoc function to free the memory at the end of the loop.",
        "pipeline_stage": "Model Training",
        "effect": "Memory Issue",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Merge API Parameter Not Explicitly Set",
        "description": "This smell refers to when a developer does not specify the options \"How\" and \"On\" during a Pandas merge operation.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Readability",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "NaN Equivalence Comparison Misused",
        "description": "This smell refers to when a developer uses the function \"np.nan\" to compare a data frame value with a NaN value.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": true
    },
    {
        "name": "Pytorch Call Method Misused",
        "description": "This smell regards when a developer uses to forward the input to the network the function \"self.net.forward()\".",
        "pipeline_stage": "Model Training",
        "effect": "Robustness",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "TensorArray Not Used",
        "description": "If a developer initializes an array using the function \"tf.constant\" and assigns a value in a loop operation, it is necessary to use \"tf.TensorArray()\" avoiding possible errors.",
        "pipeline_stage": "Model Training",
        "effect": "Efficiency & Defect Proneness",
        "type": "API-Specific",
        "feasible": true
    },
    {
        "name": "Missing the Mask of Invalid Value",
        "description": "When a developer uses the function \"tf.clip()\"(or similar) in a deep learning model, the value of certain variables could vary unexpectedly, causing invalid operations.",
        "pipeline_stage": "Model Training",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Data Leakage",
        "description": "This smell refers to when the data used by developers to train the model contains prediction results information.",
        "pipeline_stage": "Model Evaluation",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "No Scaling before Scaling-Sensitive Operation",
        "description": "This smell occurs when a developer does not use the feature scale function after some sensitive operation.",
        "pipeline_stage": "Feature Engineering",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Randomness Uncontrolled",
        "description": "This smell occurs when a developer does not explicitly set the random seed in the training process.",
        "pipeline_stage": "Model Training & Model Evaluation",
        "effect": "Reproducibility",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Threshold-Dependent Validation",
        "description": "This smell refers to when a developer uses solely Threshold dependent metrics (e.g., F1-Score), without using metrics that do not depend on a specific threshold (e.g., ROC).",
        "pipeline_stage": "Model Evaluation",
        "effect": "Robustness",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Training / Evaluation Mode Improper Toggling",
        "description": "In deep learning code, it is crucial to call the training mode at the correct location to prevent the oversight of forgetting to switch back to the inference mode after the training step.",
        "pipeline_stage": "Model Training",
        "effect": "Defect Proneness",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Unnecessary Iteration",
        "description": "This smell regards when a developer uses a loop operation rather than the corresponding Pandas function.",
        "pipeline_stage": "Data Cleaning",
        "effect": "Efficiency",
        "type": "Generic",
        "feasible": false
    },
    {
        "name": "Hyperparameter Not Explicitly Set",
        "description": "This smell occurs when a developer does not explicitly set the hyperparameter of an ML algorithm.",
        "pipeline_stage": "Model Training",
        "effect": "Defect Proneness & Reproducibility",
        "type": "Generic",
        "feasible": false
    }
]
