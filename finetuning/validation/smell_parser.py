import re


class SmellParser:
    """
    A utility class for parsing and extracting code smell labels
    from model-generated responses and validation datasets.
    """

    @staticmethod
    def parse_smells(response_text, valid_labels):
        """
        Extracts code smell labels from the model-generated response text.

        Args:
            response_text (str):
                The response text generated by the model.
            valid_labels (set):
                A set of valid code smell labels to validate against.

        Returns:
            list: A list of cleaned and valid code
                  smell labels extracted from the response.
        """
        match = re.search(
            r"The code smells are:(.*?)$", response_text, re.DOTALL
        )
        if not match:
            print("No 'The code smells are:' section found in response.")
            return []

        raw_labels = re.findall(r"- (.+)", match.group(1))
        cleaned_labels = []
        for label in raw_labels:
            label = label.split(":")[0].strip()
            if label in valid_labels:
                cleaned_labels.append(label)
            else:
                print(f"Unrecognized label: {label}")

        return list(dict.fromkeys(cleaned_labels))  # Remove duplicates

    @staticmethod
    def extract_true_labels(conversation):
        """
        Extracts ground truth code smell labels from a conversation.

        Args:
            conversation (list):
                A list of messages representing a single conversation.
                The conversation must include the assistant's response
                containing the true code smells.
        Returns:
            list: A list of unique code smell labels
                  extracted from the assistant's response.
        """
        try:
            assistant_content = conversation[2]["content"]
            match = re.search(
                r"The code smells are:(.*)", assistant_content, re.DOTALL
            )
            if match:
                raw_labels = re.findall(r"- (.+)", match.group(1))
                return list(set(label.strip() for label in raw_labels))
            else:
                print("No valid smells found in:", assistant_content)
                return []
        except (IndexError, KeyError) as e:
            print(f"Error extracting labels: {e}")
            return []
